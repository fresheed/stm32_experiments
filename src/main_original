//
// 	from https://github.com/AndoniV/STM32_Discovery_HelloWorld/blob/master/main.c
//
#include "stm32f0xx.h"
#include "stm32f0_discovery.h"
			

//============================================================================================
//	Global Variables
//============================================================================================
volatile uint16_t ticks;
uint16_t waitTicks;
uint16_t checkButton;
uint8_t buttonFlag;

//============================================================================================
//	Interrupt services
//============================================================================================
void SysTick_Handler(void)
{
	static uint8_t previous = 0;
	static uint8_t current = 0;

	ticks++;

	// Periodic flash of LED
	if (ticks >= waitTicks) {
		waitTicks = ticks + 100;						// Reloads ticks variable for next service
		GPIOC->ODR ^= (1 << 8);							// Toggles PC8
	}

	// Debounce switch and perform action if pressed
	if (ticks >= checkButton) {
		current = GPIOA->IDR & 0x0001;					// Sets current state of button

		if (buttonFlag == 0) {							// Checks if button was not pressed on a previous state
			if ((current & previous) == 0x0001) {		// Checks if current state is equal to previous
				buttonFlag = 1;							// Button was pressed successfully (debounced)
				GPIOC->ODR ^= (1 << 9);					// Toggles PC9
			}
		}
		else {
			if (current == 0) {							// Checks if button is not pressed
				buttonFlag = 0;							// Button was not pressed
			}
		}

		previous = current;

		checkButton = ticks + 20;
	}
}

//============================================================================================
// Function:	main(void)
// brief:		Main program entry point
// note:		none
//============================================================================================
int main_original(void)
{
	ticks = 0;
	waitTicks = ticks + 100;					// Will toggle PC8 each 100 m seconds
	checkButton = ticks + 20;					// Will check button each 20 m seconds
	buttonFlag = 0;

	__enable_irq();								// Enable Global Interrupts

	// GPIO ports clock enable
	RCC->AHBENR |= (1 << 17) | (1 << 19);		// Enable clocks for Ports A and C

	// GPIO ports configuration
	GPIOC->MODER |= (1 << 16) | (1 << 18);		// Port C bits 8 and 9 as outputs, PA0 is already an input
	GPIOA->PUPDR |= (1 << 1);					// Enable pull-down resistor in Port A bit 0

	// SysTick configuration
	SysTick->VAL = 0;							// Resets SysTick VAL
	SysTick->LOAD = SystemCoreClock / 1000;		// Load value for SysTick overflow (1 msecond)
	SysTick->CTRL = 0x07;						// Enable SysTick interrupt

    while(1)
    {
    	__WFI();								// Wait for interrupts
    }
}
